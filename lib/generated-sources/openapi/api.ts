/* tslint:disable */
/* eslint-disable */
/**
 * Stair Crusher Club Admin API Specification
 * ## 계단정복지도 서비스의 서버 - 어드민 통신을 위한 API 명세. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessibilityAllowedRegionDTO
 */
export interface AccessibilityAllowedRegionDTO {
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAllowedRegionDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAllowedRegionDTO
     */
    'name'?: string;
    /**
     * 
     * @type {Array<LocationDTO>}
     * @memberof AccessibilityAllowedRegionDTO
     */
    'boundaryVertices': Array<LocationDTO>;
}
/**
 * 
 * @export
 * @interface AdminAccessibilityDTO
 */
export interface AdminAccessibilityDTO {
    /**
     * 
     * @type {AdminPlaceAccessibilityDTO}
     * @memberof AdminAccessibilityDTO
     */
    'placeAccessibility': AdminPlaceAccessibilityDTO;
    /**
     * 
     * @type {AdminBuildingAccessibilityDTO}
     * @memberof AdminAccessibilityDTO
     */
    'buildingAccessibility'?: AdminBuildingAccessibilityDTO;
}
/**
 * 
 * @export
 * @interface AdminBannerDTO
 */
export interface AdminBannerDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminBannerDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminBannerDTO
     */
    'loggingKey': string;
    /**
     * 
     * @type {string}
     * @memberof AdminBannerDTO
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof AdminBannerDTO
     */
    'clickPageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof AdminBannerDTO
     */
    'clickPageTitle': string;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminBannerDTO
     */
    'startAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminBannerDTO
     */
    'endAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {number}
     * @memberof AdminBannerDTO
     */
    'displayOrder': number;
}
/**
 * 
 * @export
 * @interface AdminBuildingAccessibilityDTO
 */
export interface AdminBuildingAccessibilityDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'id': string;
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'entranceStairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'entranceStairHeightLevel'?: AdminStairHeightLevel;
    /**
     * 
     * @type {Array<AdminEntranceDoorType>}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'entranceDoorTypes'?: Array<AdminEntranceDoorType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminBuildingAccessibilityDTO
     * @deprecated
     */
    'entranceImageUrls': Array<string>;
    /**
     * 
     * @type {Array<AdminImageDTO>}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'entranceImages': Array<AdminImageDTO>;
    /**
     * 
     * @type {boolean}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'hasSlope': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'hasElevator': boolean;
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'elevatorStairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'elevatorStairHeightLevel'?: AdminStairHeightLevel;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminBuildingAccessibilityDTO
     * @deprecated
     */
    'elevatorImageUrls': Array<string>;
    /**
     * 
     * @type {Array<AdminImageDTO>}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'elevatorImages': Array<AdminImageDTO>;
    /**
     * 
     * @type {string}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'buildingName'?: string;
    /**
     * 익명으로 등록되었으면 null.
     * @type {string}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'registeredUserName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdminBuildingAccessibilityDTO
     */
    'createdAtMillis': number;
}
/**
 * 
 * @export
 * @interface AdminChallengeActionConditionDTO
 */
export interface AdminChallengeActionConditionDTO {
    /**
     * 
     * @type {Array<AdminChallengeActionConditionTypeEnumDTO>}
     * @memberof AdminChallengeActionConditionDTO
     */
    'types'?: Array<AdminChallengeActionConditionTypeEnumDTO>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AdminChallengeActionConditionTypeEnumDTO = {
    BuildingAccessibility: 'BUILDING_ACCESSIBILITY',
    BuildingAccessibilityComment: 'BUILDING_ACCESSIBILITY_COMMENT',
    PlaceAccessibility: 'PLACE_ACCESSIBILITY',
    PlaceAccessibilityComment: 'PLACE_ACCESSIBILITY_COMMENT',
    PlaceReview: 'PLACE_REVIEW'
} as const;

export type AdminChallengeActionConditionTypeEnumDTO = typeof AdminChallengeActionConditionTypeEnumDTO[keyof typeof AdminChallengeActionConditionTypeEnumDTO];


/**
 * 
 * @export
 * @interface AdminChallengeAddressConditionDTO
 */
export interface AdminChallengeAddressConditionDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminChallengeAddressConditionDTO
     */
    'rawEupMyeonDongs'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AdminChallengeConditionDTO
 */
export interface AdminChallengeConditionDTO {
    /**
     * 
     * @type {AdminChallengeAddressConditionDTO}
     * @memberof AdminChallengeConditionDTO
     */
    'addressCondition'?: AdminChallengeAddressConditionDTO;
    /**
     * 
     * @type {AdminChallengeActionConditionDTO}
     * @memberof AdminChallengeConditionDTO
     */
    'actionCondition'?: AdminChallengeActionConditionDTO;
}
/**
 * 
 * @export
 * @interface AdminChallengeDTO
 */
export interface AdminChallengeDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminChallengeDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminChallengeDTO
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminChallengeDTO
     */
    'isPublic': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminChallengeDTO
     */
    'invitationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminChallengeDTO
     */
    'passcode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminChallengeDTO
     */
    'isComplete': boolean;
    /**
     * 
     * @type {number}
     * @memberof AdminChallengeDTO
     */
    'startsAtMillis': number;
    /**
     * 
     * @type {number}
     * @memberof AdminChallengeDTO
     */
    'endsAtMillis'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminChallengeDTO
     */
    'goal': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdminChallengeDTO
     */
    'milestones': Array<number>;
    /**
     * 
     * @type {Array<AdminChallengeConditionDTO>}
     * @memberof AdminChallengeDTO
     */
    'conditions': Array<AdminChallengeConditionDTO>;
    /**
     * 
     * @type {number}
     * @memberof AdminChallengeDTO
     */
    'createdAtMillis': number;
    /**
     * 
     * @type {number}
     * @memberof AdminChallengeDTO
     */
    'updatedAtMillis': number;
    /**
     * 
     * @type {string}
     * @memberof AdminChallengeDTO
     */
    'description': string;
    /**
     * 
     * @type {AdminCrusherGroupDto}
     * @memberof AdminChallengeDTO
     */
    'crusherGroup'?: AdminCrusherGroupDto;
}
/**
 * 
 * @export
 * @interface AdminClosedPlaceCandidateDTO
 */
export interface AdminClosedPlaceCandidateDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'placeId': string;
    /**
     * 
     * @type {string}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'address'?: string;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'closedAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'acceptedAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminClosedPlaceCandidateDTO
     */
    'ignoredAt'?: EpochMillisTimestamp;
}
/**
 * 
 * @export
 * @interface AdminCreateBannerRequestDTO
 */
export interface AdminCreateBannerRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminCreateBannerRequestDTO
     */
    'loggingKey': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateBannerRequestDTO
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateBannerRequestDTO
     */
    'clickPageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateBannerRequestDTO
     */
    'clickPageTitle': string;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminCreateBannerRequestDTO
     */
    'startAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminCreateBannerRequestDTO
     */
    'endAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {number}
     * @memberof AdminCreateBannerRequestDTO
     */
    'displayOrder': number;
}
/**
 * 
 * @export
 * @interface AdminCreateChallengeRequestDTO
 */
export interface AdminCreateChallengeRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'isPublic': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'invitationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'passcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'companyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'startsAtMillis': number;
    /**
     * 
     * @type {number}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'endsAtMillis'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'goal': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'milestones': Array<number>;
    /**
     * 
     * @type {Array<AdminChallengeConditionDTO>}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'conditions': Array<AdminChallengeConditionDTO>;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'description': string;
    /**
     * 
     * @type {AdminCrusherGroupDto}
     * @memberof AdminCreateChallengeRequestDTO
     */
    'crusherGroup'?: AdminCrusherGroupDto;
}
/**
 * 
 * @export
 * @interface AdminCreateImageUploadUrlsRequestDTO
 */
export interface AdminCreateImageUploadUrlsRequestDTO {
    /**
     * 
     * @type {AdminImageUploadPurposeTypeDTO}
     * @memberof AdminCreateImageUploadUrlsRequestDTO
     */
    'purposeType': AdminImageUploadPurposeTypeDTO;
    /**
     * 업로드할 이미지 수.
     * @type {number}
     * @memberof AdminCreateImageUploadUrlsRequestDTO
     */
    'count': number;
    /**
     * 업로드할 이미지의 확장자. \'.\'을 붙이지 말아야 한다. e.g. png, jpeg 등.
     * @type {string}
     * @memberof AdminCreateImageUploadUrlsRequestDTO
     */
    'filenameExtension': string;
}
/**
 * 
 * @export
 * @interface AdminCreateImageUploadUrlsResponseDTO
 */
export interface AdminCreateImageUploadUrlsResponseDTO {
    /**
     * 
     * @type {Array<AdminImageUploadUrlDTO>}
     * @memberof AdminCreateImageUploadUrlsResponseDTO
     */
    'urls': Array<AdminImageUploadUrlDTO>;
}
/**
 * 
 * @export
 * @interface AdminCreateSearchPlacePresetRequestDTO
 */
export interface AdminCreateSearchPlacePresetRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminCreateSearchPlacePresetRequestDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AdminCreateSearchPlacePresetRequestDTO
     */
    'searchText': string;
}
/**
 * 
 * @export
 * @interface AdminCrusherGroupDto
 */
export interface AdminCrusherGroupDto {
    /**
     * 
     * @type {string}
     * @memberof AdminCrusherGroupDto
     */
    'name': string;
    /**
     * 
     * @type {AdminCrusherGroupDtoIcon}
     * @memberof AdminCrusherGroupDto
     */
    'icon'?: AdminCrusherGroupDtoIcon;
}
/**
 * 
 * @export
 * @interface AdminCrusherGroupDtoIcon
 */
export interface AdminCrusherGroupDtoIcon {
    /**
     * 
     * @type {string}
     * @memberof AdminCrusherGroupDtoIcon
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof AdminCrusherGroupDtoIcon
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof AdminCrusherGroupDtoIcon
     */
    'height': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AdminEntranceDoorType = {
    None: 'None',
    Hinged: 'Hinged',
    Sliding: 'Sliding',
    Revolving: 'Revolving',
    Automatic: 'Automatic',
    Etc: 'ETC'
} as const;

export type AdminEntranceDoorType = typeof AdminEntranceDoorType[keyof typeof AdminEntranceDoorType];


/**
 * 
 * @export
 * @interface AdminImageDTO
 */
export interface AdminImageDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminImageDTO
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof AdminImageDTO
     */
    'thumbnailUrl'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AdminImageUploadPurposeTypeDTO = {
    Banner: 'BANNER',
    CrusherLabel: 'CRUSHER_LABEL'
} as const;

export type AdminImageUploadPurposeTypeDTO = typeof AdminImageUploadPurposeTypeDTO[keyof typeof AdminImageUploadPurposeTypeDTO];


/**
 * 
 * @export
 * @interface AdminImageUploadUrlDTO
 */
export interface AdminImageUploadUrlDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminImageUploadUrlDTO
     */
    'url': string;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminImageUploadUrlDTO
     */
    'expireAt': EpochMillisTimestamp;
}
/**
 * 
 * @export
 * @interface AdminListAllBannersResponseDTO
 */
export interface AdminListAllBannersResponseDTO {
    /**
     * 
     * @type {Array<AdminBannerDTO>}
     * @memberof AdminListAllBannersResponseDTO
     */
    'banners': Array<AdminBannerDTO>;
}
/**
 * 
 * @export
 * @interface AdminListClosedPlaceCandidatesResponseDTO
 */
export interface AdminListClosedPlaceCandidatesResponseDTO {
    /**
     * 
     * @type {Array<AdminClosedPlaceCandidateDTO>}
     * @memberof AdminListClosedPlaceCandidatesResponseDTO
     */
    'items'?: Array<AdminClosedPlaceCandidateDTO>;
    /**
     * 없으면 다음 페이지가 없다는 의미.
     * @type {string}
     * @memberof AdminListClosedPlaceCandidatesResponseDTO
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface AdminListHomeBannersResponseDTO
 */
export interface AdminListHomeBannersResponseDTO {
    /**
     * 
     * @type {Array<AdminBannerDTO>}
     * @memberof AdminListHomeBannersResponseDTO
     */
    'banners': Array<AdminBannerDTO>;
}
/**
 * 
 * @export
 * @interface AdminListPushNotificationSchedulesResponseDTO
 */
export interface AdminListPushNotificationSchedulesResponseDTO {
    /**
     * 
     * @type {Array<AdminPushNotificationScheduleDTO>}
     * @memberof AdminListPushNotificationSchedulesResponseDTO
     */
    'list': Array<AdminPushNotificationScheduleDTO>;
    /**
     * 없으면 다음 페이지가 없다는 의미.
     * @type {string}
     * @memberof AdminListPushNotificationSchedulesResponseDTO
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface AdminPlaceAccessibilityDTO
 */
export interface AdminPlaceAccessibilityDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'id': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'floors'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'isFirstFloor': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'isStairOnlyOption'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminPlaceAccessibilityDTO
     * @deprecated
     */
    'imageUrls': Array<string>;
    /**
     * 
     * @type {Array<AdminImageDTO>}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'images': Array<AdminImageDTO>;
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'stairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'stairHeightLevel'?: AdminStairHeightLevel;
    /**
     * 
     * @type {boolean}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'hasSlope': boolean;
    /**
     * 
     * @type {Array<AdminEntranceDoorType>}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'entranceDoorTypes'?: Array<AdminEntranceDoorType>;
    /**
     * 
     * @type {string}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'placeName': string;
    /**
     * 익명으로 등록되었으면 null.
     * @type {string}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'registeredUserName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdminPlaceAccessibilityDTO
     */
    'createdAtMillis': number;
}
/**
 * 
 * @export
 * @interface AdminPushNotificationScheduleDTO
 */
export interface AdminPushNotificationScheduleDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'id': string;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'scheduledAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'sentAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {string}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'deepLink'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminPushNotificationScheduleDTO
     */
    'targetUserIds': Array<string>;
}
/**
 * 
 * @export
 * @interface AdminSearchAccessibilitiesResultDTO
 */
export interface AdminSearchAccessibilitiesResultDTO {
    /**
     * 
     * @type {Array<AdminAccessibilityDTO>}
     * @memberof AdminSearchAccessibilitiesResultDTO
     */
    'items': Array<AdminAccessibilityDTO>;
    /**
     * 없으면 다음 페이지가 없다는 의미.
     * @type {string}
     * @memberof AdminSearchAccessibilitiesResultDTO
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface AdminSearchPlacePresetDTO
 */
export interface AdminSearchPlacePresetDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminSearchPlacePresetDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminSearchPlacePresetDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AdminSearchPlacePresetDTO
     */
    'searchText': string;
}
/**
 * 
 * @export
 * @interface AdminSendPushNotificationRequestDTO
 */
export interface AdminSendPushNotificationRequestDTO {
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminSendPushNotificationRequestDTO
     */
    'scheduledAt'?: EpochMillisTimestamp;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminSendPushNotificationRequestDTO
     */
    'userIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdminSendPushNotificationRequestDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminSendPushNotificationRequestDTO
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof AdminSendPushNotificationRequestDTO
     */
    'deepLink'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AdminStairHeightLevel = {
    HalfThumb: 'HALF_THUMB',
    Thumb: 'THUMB',
    OverThumb: 'OVER_THUMB'
} as const;

export type AdminStairHeightLevel = typeof AdminStairHeightLevel[keyof typeof AdminStairHeightLevel];


/**
 * 
 * @export
 * @enum {string}
 */

export const AdminStairInfoDTO = {
    Undefined: 'UNDEFINED',
    None: 'NONE',
    One: 'ONE',
    TwoToFive: 'TWO_TO_FIVE',
    OverSix: 'OVER_SIX'
} as const;

export type AdminStairInfoDTO = typeof AdminStairInfoDTO[keyof typeof AdminStairInfoDTO];


/**
 * 
 * @export
 * @interface AdminUpdateBuildingAccessibilityRequestDTO
 */
export interface AdminUpdateBuildingAccessibilityRequestDTO {
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'entranceStairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'hasSlope': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'hasElevator': boolean;
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'elevatorStairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'entranceStairHeightLevel'?: AdminStairHeightLevel;
    /**
     * 
     * @type {Array<AdminEntranceDoorType>}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'entranceDoorTypes'?: Array<AdminEntranceDoorType>;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminUpdateBuildingAccessibilityRequestDTO
     */
    'elevatorStairHeightLevel'?: AdminStairHeightLevel;
}
/**
 * 
 * @export
 * @interface AdminUpdateChallengeRequestDTO
 */
export interface AdminUpdateChallengeRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminUpdateChallengeRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof AdminUpdateChallengeRequestDTO
     */
    'endsAtMillis'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdateChallengeRequestDTO
     */
    'description': string;
    /**
     * 
     * @type {AdminCrusherGroupDto}
     * @memberof AdminUpdateChallengeRequestDTO
     */
    'crusherGroup'?: AdminCrusherGroupDto;
}
/**
 * 
 * @export
 * @interface AdminUpdatePlaceAccessibilityRequestDTO
 */
export interface AdminUpdatePlaceAccessibilityRequestDTO {
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'isFirstFloor': boolean;
    /**
     * 
     * @type {AdminStairInfoDTO}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'stairInfo': AdminStairInfoDTO;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'hasSlope': boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'floors'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'isStairOnlyOption'?: boolean;
    /**
     * 
     * @type {AdminStairHeightLevel}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'stairHeightLevel'?: AdminStairHeightLevel;
    /**
     * 
     * @type {Array<AdminEntranceDoorType>}
     * @memberof AdminUpdatePlaceAccessibilityRequestDTO
     */
    'entranceDoorTypes'?: Array<AdminEntranceDoorType>;
}
/**
 * 
 * @export
 * @interface AdminUpdatePushNotificationScheduleRequestDTO
 */
export interface AdminUpdatePushNotificationScheduleRequestDTO {
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof AdminUpdatePushNotificationScheduleRequestDTO
     */
    'scheduledAt': EpochMillisTimestamp;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdatePushNotificationScheduleRequestDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdatePushNotificationScheduleRequestDTO
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdatePushNotificationScheduleRequestDTO
     */
    'deepLink'?: string;
}
/**
 * 퀘스트 생성 시뮬레이션 결과. 각 퀘스트마다 1개의 아이템이 반환된다.
 * @export
 * @interface ClubQuestCreateDryRunResultItemDTO
 */
export interface ClubQuestCreateDryRunResultItemDTO {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestCreateDryRunResultItemDTO
     */
    'questNamePostfix': string;
    /**
     * 
     * @type {LocationDTO}
     * @memberof ClubQuestCreateDryRunResultItemDTO
     */
    'questCenterLocation': LocationDTO;
    /**
     * 
     * @type {Array<ClubQuestTargetBuildingDTO>}
     * @memberof ClubQuestCreateDryRunResultItemDTO
     */
    'targetBuildings': Array<ClubQuestTargetBuildingDTO>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClubQuestCreateRegionTypeDTO = {
    Circle: 'CIRCLE',
    Polygon: 'POLYGON'
} as const;

export type ClubQuestCreateRegionTypeDTO = typeof ClubQuestCreateRegionTypeDTO[keyof typeof ClubQuestCreateRegionTypeDTO];


/**
 * 퀘스트.
 * @export
 * @interface ClubQuestDTO
 */
export interface ClubQuestDTO {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestDTO
     */
    'name': string;
    /**
     * 
     * @type {ClubQuestPurposeTypeEnumDTO}
     * @memberof ClubQuestDTO
     */
    'purposeType': ClubQuestPurposeTypeEnumDTO;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof ClubQuestDTO
     */
    'startAt': EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof ClubQuestDTO
     */
    'endAt': EpochMillisTimestamp;
    /**
     * 
     * @type {Array<ClubQuestTargetBuildingDTO>}
     * @memberof ClubQuestDTO
     */
    'buildings': Array<ClubQuestTargetBuildingDTO>;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestDTO
     */
    'shortenedUrl'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClubQuestPurposeTypeEnumDTO = {
    CrusherClub: 'CRUSHER_CLUB',
    DailyClub: 'DAILY_CLUB',
    CollaboClub: 'COLLABO_CLUB',
    EsgPartners: 'ESG_PARTNERS'
} as const;

export type ClubQuestPurposeTypeEnumDTO = typeof ClubQuestPurposeTypeEnumDTO[keyof typeof ClubQuestPurposeTypeEnumDTO];


/**
 * 
 * @export
 * @interface ClubQuestSummaryDTO
 */
export interface ClubQuestSummaryDTO {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestSummaryDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestSummaryDTO
     */
    'name': string;
    /**
     * 
     * @type {ClubQuestPurposeTypeEnumDTO}
     * @memberof ClubQuestSummaryDTO
     */
    'purposeType': ClubQuestPurposeTypeEnumDTO;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof ClubQuestSummaryDTO
     */
    'startAt': EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof ClubQuestSummaryDTO
     */
    'endAt': EpochMillisTimestamp;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestSummaryDTO
     */
    'shortenedUrl'?: string;
}
/**
 * 퀘스트 대상이 되는 건물 정보.
 * @export
 * @interface ClubQuestTargetBuildingDTO
 */
export interface ClubQuestTargetBuildingDTO {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestTargetBuildingDTO
     */
    'buildingId': string;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestTargetBuildingDTO
     */
    'name': string;
    /**
     * 
     * @type {LocationDTO}
     * @memberof ClubQuestTargetBuildingDTO
     */
    'location': LocationDTO;
    /**
     * 
     * @type {Array<ClubQuestTargetPlaceDTO>}
     * @memberof ClubQuestTargetBuildingDTO
     */
    'places': Array<ClubQuestTargetPlaceDTO>;
}
/**
 * 퀘스트 대상이 되는 점포 정보.
 * @export
 * @interface ClubQuestTargetPlaceDTO
 */
export interface ClubQuestTargetPlaceDTO {
    /**
     * 점포의 ID.
     * @type {string}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'placeId': string;
    /**
     * 건물의 ID.
     * @type {string}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'buildingId': string;
    /**
     * 점포의 human-readable한 이름.
     * @type {string}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'name': string;
    /**
     * 
     * @type {LocationDTO}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'location': LocationDTO;
    /**
     * 장소가 정복됐는지 여부.
     * @type {boolean}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'isConquered': boolean;
    /**
     * 장소가 폐업으로 추정되는지 여부.
     * @type {boolean}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'isClosedExpected': boolean;
    /**
     * 장소가 실제로 폐업됐는지 여부.
     * @type {boolean}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'isClosed': boolean;
    /**
     * 장소에 접근 가능한지 여부.
     * @type {boolean}
     * @memberof ClubQuestTargetPlaceDTO
     */
    'isNotAccessible': boolean;
}
/**
 * 
 * @export
 * @interface ClubQuestsClubQuestIdIsClosedPutRequest
 */
export interface ClubQuestsClubQuestIdIsClosedPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestsClubQuestIdIsClosedPutRequest
     */
    'buildingId': string;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestsClubQuestIdIsClosedPutRequest
     */
    'placeId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ClubQuestsClubQuestIdIsClosedPutRequest
     */
    'isClosed': boolean;
}
/**
 * 
 * @export
 * @interface ClubQuestsClubQuestIdIsNotAccessiblePutRequest
 */
export interface ClubQuestsClubQuestIdIsNotAccessiblePutRequest {
    /**
     * 
     * @type {string}
     * @memberof ClubQuestsClubQuestIdIsNotAccessiblePutRequest
     */
    'buildingId': string;
    /**
     * 
     * @type {string}
     * @memberof ClubQuestsClubQuestIdIsNotAccessiblePutRequest
     */
    'placeId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ClubQuestsClubQuestIdIsNotAccessiblePutRequest
     */
    'isNotAccessible': boolean;
}
/**
 * 
 * @export
 * @interface ClubQuestsCreateDryRunPostRequest
 */
export interface ClubQuestsCreateDryRunPostRequest {
    /**
     * 
     * @type {ClubQuestCreateRegionTypeDTO}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'regionType'?: ClubQuestCreateRegionTypeDTO;
    /**
     * 
     * @type {LocationDTO}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'centerLocation'?: LocationDTO;
    /**
     * 
     * @type {number}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'radiusMeters'?: number;
    /**
     * 
     * @type {Array<LocationDTO>}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'points'?: Array<LocationDTO>;
    /**
     * 
     * @type {number}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'clusterCount': number;
    /**
     * 
     * @type {number}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'maxPlaceCountPerQuest': number;
    /**
     * 지도 API 기반이 아닌, 이미 크롤링하여 계단정복지도 서버 DB에 캐싱해둔 장소를 기반으로 퀘스트를 생성할지 여부. 지정되지 않은 경우, default는 false. 
     * @type {boolean}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'useAlreadyCrawledPlace'?: boolean;
    /**
     * 
     * @type {Array<QuestTargetPlaceCategoryEnumDTO>}
     * @memberof ClubQuestsCreateDryRunPostRequest
     */
    'questTargetPlaceCategories'?: Array<QuestTargetPlaceCategoryEnumDTO>;
}
/**
 * 
 * @export
 * @interface CreateAccessibilityAllowedRegionRequestDTO
 */
export interface CreateAccessibilityAllowedRegionRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateAccessibilityAllowedRegionRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {Array<LocationDTO>}
     * @memberof CreateAccessibilityAllowedRegionRequestDTO
     */
    'boundaryVertices': Array<LocationDTO>;
}
/**
 * 
 * @export
 * @interface CreateAndNotifyDailyClubQuestRequestDTO
 */
export interface CreateAndNotifyDailyClubQuestRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestRequestDTO
     */
    'requesterName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestRequestDTO
     */
    'requesterPhoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestRequestDTO
     */
    'centerLocationPlaceName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestRequestDTO
     */
    'maxPlaceCountPerQuest': string;
}
/**
 * 
 * @export
 * @interface CreateAndNotifyDailyClubQuestResponseDTO
 */
export interface CreateAndNotifyDailyClubQuestResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestResponseDTO
     */
    'clubQuestId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAndNotifyDailyClubQuestResponseDTO
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CreateClubQuestRequest
 */
export interface CreateClubQuestRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateClubQuestRequest
     */
    'questNamePrefix': string;
    /**
     * 
     * @type {ClubQuestPurposeTypeEnumDTO}
     * @memberof CreateClubQuestRequest
     */
    'purposeType': ClubQuestPurposeTypeEnumDTO;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof CreateClubQuestRequest
     */
    'startAt': EpochMillisTimestamp;
    /**
     * 
     * @type {EpochMillisTimestamp}
     * @memberof CreateClubQuestRequest
     */
    'endAt': EpochMillisTimestamp;
    /**
     * 
     * @type {Array<ClubQuestCreateDryRunResultItemDTO>}
     * @memberof CreateClubQuestRequest
     */
    'dryRunResults': Array<ClubQuestCreateDryRunResultItemDTO>;
}
/**
 * 
 * @export
 * @interface CreateClubQuestResponseDTO
 */
export interface CreateClubQuestResponseDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateClubQuestResponseDTO
     */
    'clubQuestIds': Array<string>;
}
/**
 * 특정 시각을 표현하기 위한 모델.
 * @export
 * @interface EpochMillisTimestamp
 */
export interface EpochMillisTimestamp {
    /**
     * 
     * @type {number}
     * @memberof EpochMillisTimestamp
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface GetCursoredClubQuestSummariesResultDTO
 */
export interface GetCursoredClubQuestSummariesResultDTO {
    /**
     * 
     * @type {Array<ClubQuestSummaryDTO>}
     * @memberof GetCursoredClubQuestSummariesResultDTO
     */
    'list': Array<ClubQuestSummaryDTO>;
    /**
     * 없으면 다음 페이지가 없다는 의미.
     * @type {string}
     * @memberof GetCursoredClubQuestSummariesResultDTO
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface GetSearchPreset200Response
 */
export interface GetSearchPreset200Response {
    /**
     * 
     * @type {Array<AdminSearchPlacePresetDTO>}
     * @memberof GetSearchPreset200Response
     */
    'presets': Array<AdminSearchPlacePresetDTO>;
}
/**
 * 위치를 위경도로 표현하기 위한 모델.
 * @export
 * @interface LocationDTO
 */
export interface LocationDTO {
    /**
     * 
     * @type {number}
     * @memberof LocationDTO
     */
    'lng': number;
    /**
     * 
     * @type {number}
     * @memberof LocationDTO
     */
    'lat': number;
}
/**
 * 
 * @export
 * @interface LoginPostRequest
 */
export interface LoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const QuestTargetPlaceCategoryEnumDTO = {
    Restaurant: 'RESTAURANT',
    Cafe: 'CAFE',
    Market: 'MARKET',
    Hospital: 'HOSPITAL',
    Pharmacy: 'PHARMACY',
    ConvenienceStore: 'CONVENIENCE_STORE'
} as const;

export type QuestTargetPlaceCategoryEnumDTO = typeof QuestTargetPlaceCategoryEnumDTO[keyof typeof QuestTargetPlaceCategoryEnumDTO];


/**
 * 
 * @export
 * @interface StartPlaceCrawlingRequestDTO
 */
export interface StartPlaceCrawlingRequestDTO {
    /**
     * 
     * @type {Array<LocationDTO>}
     * @memberof StartPlaceCrawlingRequestDTO
     */
    'boundaryVertices': Array<LocationDTO>;
}

/**
 * AccessibilityApi - axios parameter creator
 * @export
 */
export const AccessibilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 건물 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildingAccessibility: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBuildingAccessibility', 'id', id)
            const localVarPath = `/building-accessibilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 장소 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaceAccessibility: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlaceAccessibility', 'id', id)
            const localVarPath = `/place-accessibilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 장소 & 건물 정보를 검색한다.
         * @param {string} [placeName] 
         * @param {string} [createdAtFromLocalDate] yyyy-MM-dd 형식
         * @param {string} [createdAtToLocalDate] yyyy-MM-dd 형식
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 20으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAccessibilities: async (placeName?: string, createdAtFromLocalDate?: string, createdAtToLocalDate?: string, cursor?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessibilities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (placeName !== undefined) {
                localVarQueryParameter['placeName'] = placeName;
            }

            if (createdAtFromLocalDate !== undefined) {
                localVarQueryParameter['createdAtFromLocalDate'] = createdAtFromLocalDate;
            }

            if (createdAtToLocalDate !== undefined) {
                localVarQueryParameter['createdAtToLocalDate'] = createdAtToLocalDate;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 건물 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdateBuildingAccessibilityRequestDTO} adminUpdateBuildingAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuildingAccessibility: async (id: string, adminUpdateBuildingAccessibilityRequestDTO: AdminUpdateBuildingAccessibilityRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBuildingAccessibility', 'id', id)
            // verify required parameter 'adminUpdateBuildingAccessibilityRequestDTO' is not null or undefined
            assertParamExists('updateBuildingAccessibility', 'adminUpdateBuildingAccessibilityRequestDTO', adminUpdateBuildingAccessibilityRequestDTO)
            const localVarPath = `/building-accessibilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateBuildingAccessibilityRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 장소 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdatePlaceAccessibilityRequestDTO} adminUpdatePlaceAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlaceAccessibility: async (id: string, adminUpdatePlaceAccessibilityRequestDTO: AdminUpdatePlaceAccessibilityRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePlaceAccessibility', 'id', id)
            // verify required parameter 'adminUpdatePlaceAccessibilityRequestDTO' is not null or undefined
            assertParamExists('updatePlaceAccessibility', 'adminUpdatePlaceAccessibilityRequestDTO', adminUpdatePlaceAccessibilityRequestDTO)
            const localVarPath = `/place-accessibilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdatePlaceAccessibilityRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessibilityApi - functional programming interface
 * @export
 */
export const AccessibilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessibilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 건물 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBuildingAccessibility(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildingAccessibility(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 장소 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlaceAccessibility(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlaceAccessibility(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 장소 & 건물 정보를 검색한다.
         * @param {string} [placeName] 
         * @param {string} [createdAtFromLocalDate] yyyy-MM-dd 형식
         * @param {string} [createdAtToLocalDate] yyyy-MM-dd 형식
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 20으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAccessibilities(placeName?: string, createdAtFromLocalDate?: string, createdAtToLocalDate?: string, cursor?: string, limit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminSearchAccessibilitiesResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAccessibilities(placeName, createdAtFromLocalDate, createdAtToLocalDate, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 건물 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdateBuildingAccessibilityRequestDTO} adminUpdateBuildingAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBuildingAccessibility(id: string, adminUpdateBuildingAccessibilityRequestDTO: AdminUpdateBuildingAccessibilityRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBuildingAccessibility(id, adminUpdateBuildingAccessibilityRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 장소 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdatePlaceAccessibilityRequestDTO} adminUpdatePlaceAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlaceAccessibility(id: string, adminUpdatePlaceAccessibilityRequestDTO: AdminUpdatePlaceAccessibilityRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlaceAccessibility(id, adminUpdatePlaceAccessibilityRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessibilityApi - factory interface
 * @export
 */
export const AccessibilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessibilityApiFp(configuration)
    return {
        /**
         * 
         * @summary 건물 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildingAccessibility(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBuildingAccessibility(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 장소 정보를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaceAccessibility(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePlaceAccessibility(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 장소 & 건물 정보를 검색한다.
         * @param {string} [placeName] 
         * @param {string} [createdAtFromLocalDate] yyyy-MM-dd 형식
         * @param {string} [createdAtToLocalDate] yyyy-MM-dd 형식
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 20으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAccessibilities(placeName?: string, createdAtFromLocalDate?: string, createdAtToLocalDate?: string, cursor?: string, limit?: string, options?: any): AxiosPromise<AdminSearchAccessibilitiesResultDTO> {
            return localVarFp.searchAccessibilities(placeName, createdAtFromLocalDate, createdAtToLocalDate, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 건물 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdateBuildingAccessibilityRequestDTO} adminUpdateBuildingAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuildingAccessibility(id: string, adminUpdateBuildingAccessibilityRequestDTO: AdminUpdateBuildingAccessibilityRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateBuildingAccessibility(id, adminUpdateBuildingAccessibilityRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 장소 정보를 업데이트한다.
         * @param {string} id 
         * @param {AdminUpdatePlaceAccessibilityRequestDTO} adminUpdatePlaceAccessibilityRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlaceAccessibility(id: string, adminUpdatePlaceAccessibilityRequestDTO: AdminUpdatePlaceAccessibilityRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updatePlaceAccessibility(id, adminUpdatePlaceAccessibilityRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessibilityApi - object-oriented interface
 * @export
 * @class AccessibilityApi
 * @extends {BaseAPI}
 */
export class AccessibilityApi extends BaseAPI {
    /**
     * 
     * @summary 건물 정보를 삭제한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityApi
     */
    public deleteBuildingAccessibility(id: string, options?: AxiosRequestConfig) {
        return AccessibilityApiFp(this.configuration).deleteBuildingAccessibility(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 장소 정보를 삭제한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityApi
     */
    public deletePlaceAccessibility(id: string, options?: AxiosRequestConfig) {
        return AccessibilityApiFp(this.configuration).deletePlaceAccessibility(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 장소 & 건물 정보를 검색한다.
     * @param {string} [placeName] 
     * @param {string} [createdAtFromLocalDate] yyyy-MM-dd 형식
     * @param {string} [createdAtToLocalDate] yyyy-MM-dd 형식
     * @param {string} [cursor] 
     * @param {string} [limit] default 값은 20으로 설정된다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityApi
     */
    public searchAccessibilities(placeName?: string, createdAtFromLocalDate?: string, createdAtToLocalDate?: string, cursor?: string, limit?: string, options?: AxiosRequestConfig) {
        return AccessibilityApiFp(this.configuration).searchAccessibilities(placeName, createdAtFromLocalDate, createdAtToLocalDate, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 건물 정보를 업데이트한다.
     * @param {string} id 
     * @param {AdminUpdateBuildingAccessibilityRequestDTO} adminUpdateBuildingAccessibilityRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityApi
     */
    public updateBuildingAccessibility(id: string, adminUpdateBuildingAccessibilityRequestDTO: AdminUpdateBuildingAccessibilityRequestDTO, options?: AxiosRequestConfig) {
        return AccessibilityApiFp(this.configuration).updateBuildingAccessibility(id, adminUpdateBuildingAccessibilityRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 장소 정보를 업데이트한다.
     * @param {string} id 
     * @param {AdminUpdatePlaceAccessibilityRequestDTO} adminUpdatePlaceAccessibilityRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityApi
     */
    public updatePlaceAccessibility(id: string, adminUpdatePlaceAccessibilityRequestDTO: AdminUpdatePlaceAccessibilityRequestDTO, options?: AxiosRequestConfig) {
        return AccessibilityApiFp(this.configuration).updatePlaceAccessibility(id, adminUpdatePlaceAccessibilityRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BannerApi - axios parameter creator
 * @export
 */
export const BannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 전체 배너 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAllListBanners: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 배너를 생성한다.
         * @param {AdminCreateBannerRequestDTO} adminCreateBannerRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateBanner: async (adminCreateBannerRequestDTO: AdminCreateBannerRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminCreateBannerRequestDTO' is not null or undefined
            assertParamExists('adminCreateBanner', 'adminCreateBannerRequestDTO', adminCreateBannerRequestDTO)
            const localVarPath = `/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateBannerRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 배너를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteBanner: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteBanner', 'id', id)
            const localVarPath = `/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 앱의 홈에 노출되는 것과 동일한 목록 & 순서의 배너를 보여준다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListHomeBanners: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/banners/home-banner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BannerApi - functional programming interface
 * @export
 */
export const BannerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BannerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 전체 배너 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAllListBanners(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminListAllBannersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminAllListBanners(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 배너를 생성한다.
         * @param {AdminCreateBannerRequestDTO} adminCreateBannerRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateBanner(adminCreateBannerRequestDTO: AdminCreateBannerRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateBanner(adminCreateBannerRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 배너를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteBanner(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteBanner(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 앱의 홈에 노출되는 것과 동일한 목록 & 순서의 배너를 보여준다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminListHomeBanners(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminListHomeBannersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminListHomeBanners(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BannerApi - factory interface
 * @export
 */
export const BannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BannerApiFp(configuration)
    return {
        /**
         * 
         * @summary 전체 배너 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAllListBanners(options?: any): AxiosPromise<AdminListAllBannersResponseDTO> {
            return localVarFp.adminAllListBanners(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 배너를 생성한다.
         * @param {AdminCreateBannerRequestDTO} adminCreateBannerRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateBanner(adminCreateBannerRequestDTO: AdminCreateBannerRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.adminCreateBanner(adminCreateBannerRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 배너를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteBanner(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminDeleteBanner(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 앱의 홈에 노출되는 것과 동일한 목록 & 순서의 배너를 보여준다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListHomeBanners(options?: any): AxiosPromise<AdminListHomeBannersResponseDTO> {
            return localVarFp.adminListHomeBanners(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BannerApi - object-oriented interface
 * @export
 * @class BannerApi
 * @extends {BaseAPI}
 */
export class BannerApi extends BaseAPI {
    /**
     * 
     * @summary 전체 배너 목록을 조회한다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public adminAllListBanners(options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).adminAllListBanners(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 배너를 생성한다.
     * @param {AdminCreateBannerRequestDTO} adminCreateBannerRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public adminCreateBanner(adminCreateBannerRequestDTO: AdminCreateBannerRequestDTO, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).adminCreateBanner(adminCreateBannerRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 배너를 삭제한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public adminDeleteBanner(id: string, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).adminDeleteBanner(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 앱의 홈에 노출되는 것과 동일한 목록 & 순서의 배너를 보여준다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public adminListHomeBanners(options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).adminListHomeBanners(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChallengeApi - axios parameter creator
 * @export
 */
export const ChallengeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 챌린지를 삭제한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdDelete: async (challengeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeId' is not null or undefined
            assertParamExists('challengesChallengeIdDelete', 'challengeId', challengeId)
            const localVarPath = `/challenges/{challengeId}`
                .replace(`{${"challengeId"}}`, encodeURIComponent(String(challengeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 챌린지를 조회한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdGet: async (challengeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeId' is not null or undefined
            assertParamExists('challengesChallengeIdGet', 'challengeId', challengeId)
            const localVarPath = `/challenges/{challengeId}`
                .replace(`{${"challengeId"}}`, encodeURIComponent(String(challengeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 챌린지를 업데이트한다.
         * @param {string} challengeId 
         * @param {AdminUpdateChallengeRequestDTO} adminUpdateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdPut: async (challengeId: string, adminUpdateChallengeRequestDTO: AdminUpdateChallengeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeId' is not null or undefined
            assertParamExists('challengesChallengeIdPut', 'challengeId', challengeId)
            // verify required parameter 'adminUpdateChallengeRequestDTO' is not null or undefined
            assertParamExists('challengesChallengeIdPut', 'adminUpdateChallengeRequestDTO', adminUpdateChallengeRequestDTO)
            const localVarPath = `/challenges/{challengeId}`
                .replace(`{${"challengeId"}}`, encodeURIComponent(String(challengeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateChallengeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 챌린지 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/challenges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 챌린지를 생성한다.
         * @param {AdminCreateChallengeRequestDTO} adminCreateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesPost: async (adminCreateChallengeRequestDTO: AdminCreateChallengeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminCreateChallengeRequestDTO' is not null or undefined
            assertParamExists('challengesPost', 'adminCreateChallengeRequestDTO', adminCreateChallengeRequestDTO)
            const localVarPath = `/challenges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateChallengeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChallengeApi - functional programming interface
 * @export
 */
export const ChallengeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChallengeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 챌린지를 삭제한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengesChallengeIdDelete(challengeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengesChallengeIdDelete(challengeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 챌린지를 조회한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengesChallengeIdGet(challengeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminChallengeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengesChallengeIdGet(challengeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 챌린지를 업데이트한다.
         * @param {string} challengeId 
         * @param {AdminUpdateChallengeRequestDTO} adminUpdateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengesChallengeIdPut(challengeId: string, adminUpdateChallengeRequestDTO: AdminUpdateChallengeRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengesChallengeIdPut(challengeId, adminUpdateChallengeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 챌린지 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminChallengeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 챌린지를 생성한다.
         * @param {AdminCreateChallengeRequestDTO} adminCreateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengesPost(adminCreateChallengeRequestDTO: AdminCreateChallengeRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengesPost(adminCreateChallengeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChallengeApi - factory interface
 * @export
 */
export const ChallengeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChallengeApiFp(configuration)
    return {
        /**
         * 
         * @summary 챌린지를 삭제한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdDelete(challengeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.challengesChallengeIdDelete(challengeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 챌린지를 조회한다.
         * @param {string} challengeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdGet(challengeId: string, options?: any): AxiosPromise<AdminChallengeDTO> {
            return localVarFp.challengesChallengeIdGet(challengeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 챌린지를 업데이트한다.
         * @param {string} challengeId 
         * @param {AdminUpdateChallengeRequestDTO} adminUpdateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesChallengeIdPut(challengeId: string, adminUpdateChallengeRequestDTO: AdminUpdateChallengeRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.challengesChallengeIdPut(challengeId, adminUpdateChallengeRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 챌린지 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesGet(options?: any): AxiosPromise<Array<AdminChallengeDTO>> {
            return localVarFp.challengesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 챌린지를 생성한다.
         * @param {AdminCreateChallengeRequestDTO} adminCreateChallengeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengesPost(adminCreateChallengeRequestDTO: AdminCreateChallengeRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.challengesPost(adminCreateChallengeRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChallengeApi - object-oriented interface
 * @export
 * @class ChallengeApi
 * @extends {BaseAPI}
 */
export class ChallengeApi extends BaseAPI {
    /**
     * 
     * @summary 챌린지를 삭제한다.
     * @param {string} challengeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengesChallengeIdDelete(challengeId: string, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengesChallengeIdDelete(challengeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 챌린지를 조회한다.
     * @param {string} challengeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengesChallengeIdGet(challengeId: string, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengesChallengeIdGet(challengeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 챌린지를 업데이트한다.
     * @param {string} challengeId 
     * @param {AdminUpdateChallengeRequestDTO} adminUpdateChallengeRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengesChallengeIdPut(challengeId: string, adminUpdateChallengeRequestDTO: AdminUpdateChallengeRequestDTO, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengesChallengeIdPut(challengeId, adminUpdateChallengeRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 챌린지 목록을 조회한다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengesGet(options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 챌린지를 생성한다.
     * @param {AdminCreateChallengeRequestDTO} adminCreateChallengeRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengesPost(adminCreateChallengeRequestDTO: AdminCreateChallengeRequestDTO, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengesPost(adminCreateChallengeRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 해당 장소를 폐업 상태로 변경한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptClosedPlaceCandidate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('acceptClosedPlaceCandidate', 'id', id)
            const localVarPath = `/closed-place-candidates/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 정보 등록 가능 지역 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessibilityAllowedRegions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 생성한다.
         * @param {CreateAccessibilityAllowedRegionRequestDTO} createAccessibilityAllowedRegionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsPost: async (createAccessibilityAllowedRegionRequestDTO: CreateAccessibilityAllowedRegionRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccessibilityAllowedRegionRequestDTO' is not null or undefined
            assertParamExists('accessibilityAllowedRegionsPost', 'createAccessibilityAllowedRegionRequestDTO', createAccessibilityAllowedRegionRequestDTO)
            const localVarPath = `/accessibilityAllowedRegions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccessibilityAllowedRegionRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 삭제한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsRegionIdDelete: async (regionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('accessibilityAllowedRegionsRegionIdDelete', 'regionId', regionId)
            const localVarPath = `/accessibilityAllowedRegions/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 조회한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsRegionIdGet: async (regionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('accessibilityAllowedRegionsRegionIdGet', 'regionId', regionId)
            const localVarPath = `/accessibilityAllowedRegions/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 배너 생성 등의 상황에서 이미지를 업로드하기 위한 URL을 받아 온다.
         * @param {AdminCreateImageUploadUrlsRequestDTO} adminCreateImageUploadUrlsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateImageUploadUrls: async (adminCreateImageUploadUrlsRequestDTO: AdminCreateImageUploadUrlsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminCreateImageUploadUrlsRequestDTO' is not null or undefined
            assertParamExists('adminCreateImageUploadUrls', 'adminCreateImageUploadUrlsRequestDTO', adminCreateImageUploadUrlsRequestDTO)
            const localVarPath = `/image-upload-urls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateImageUploadUrlsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 푸시 알림 스케쥴을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 푸시 알림 조회.
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPushSchedules: async (cursor?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/pushSchedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 유저들에게 push notification을 보낸다.
         * @param {AdminSendPushNotificationRequestDTO} adminSendPushNotificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendPushNotification: async (adminSendPushNotificationRequestDTO: AdminSendPushNotificationRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminSendPushNotificationRequestDTO' is not null or undefined
            assertParamExists('adminSendPushNotification', 'adminSendPushNotificationRequestDTO', adminSendPushNotificationRequestDTO)
            const localVarPath = `/notifications/sendPush`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminSendPushNotificationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 퀘스트를 삭제한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdDelete: async (clubQuestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdDelete', 'clubQuestId', clubQuestId)
            const localVarPath = `/clubQuests/{clubQuestId}`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 퀘스트를 조회한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdGet: async (clubQuestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdGet', 'clubQuestId', clubQuestId)
            const localVarPath = `/clubQuests/{clubQuestId}`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 점포의 폐점 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsClosedPutRequest} clubQuestsClubQuestIdIsClosedPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdIsClosedPut: async (clubQuestId: string, clubQuestsClubQuestIdIsClosedPutRequest: ClubQuestsClubQuestIdIsClosedPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdIsClosedPut', 'clubQuestId', clubQuestId)
            // verify required parameter 'clubQuestsClubQuestIdIsClosedPutRequest' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdIsClosedPut', 'clubQuestsClubQuestIdIsClosedPutRequest', clubQuestsClubQuestIdIsClosedPutRequest)
            const localVarPath = `/clubQuests/{clubQuestId}/isClosed`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clubQuestsClubQuestIdIsClosedPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 점포의 접근 가능 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsNotAccessiblePutRequest} clubQuestsClubQuestIdIsNotAccessiblePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdIsNotAccessiblePut: async (clubQuestId: string, clubQuestsClubQuestIdIsNotAccessiblePutRequest: ClubQuestsClubQuestIdIsNotAccessiblePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdIsNotAccessiblePut', 'clubQuestId', clubQuestId)
            // verify required parameter 'clubQuestsClubQuestIdIsNotAccessiblePutRequest' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdIsNotAccessiblePut', 'clubQuestsClubQuestIdIsNotAccessiblePutRequest', clubQuestsClubQuestIdIsNotAccessiblePutRequest)
            const localVarPath = `/clubQuests/{clubQuestId}/isNotAccessible`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clubQuestsClubQuestIdIsNotAccessiblePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 퀘스트에서 특정 건물을 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetBuildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdTargetBuildingsDelete: async (clubQuestId: string, targetBuildingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdTargetBuildingsDelete', 'clubQuestId', clubQuestId)
            // verify required parameter 'targetBuildingId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdTargetBuildingsDelete', 'targetBuildingId', targetBuildingId)
            const localVarPath = `/clubQuests/{clubQuestId}/targetBuildings`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetBuildingId !== undefined) {
                localVarQueryParameter['targetBuildingId'] = targetBuildingId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 퀘스트에서 특정 장소를 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetPlaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdTargetPlacesDelete: async (clubQuestId: string, targetPlaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdTargetPlacesDelete', 'clubQuestId', clubQuestId)
            // verify required parameter 'targetPlaceId' is not null or undefined
            assertParamExists('clubQuestsClubQuestIdTargetPlacesDelete', 'targetPlaceId', targetPlaceId)
            const localVarPath = `/clubQuests/{clubQuestId}/targetPlaces`
                .replace(`{${"clubQuestId"}}`, encodeURIComponent(String(clubQuestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetPlaceId !== undefined) {
                localVarQueryParameter['targetPlaceId'] = targetPlaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 주어진 조건(중심 위치, 반경, 퀘스트 분할 숫자 등)으로 퀘스트를 생성하면 어떻게 생성될지 시뮬레이션하여 미리 확인한다.
         * @param {ClubQuestsCreateDryRunPostRequest} clubQuestsCreateDryRunPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsCreateDryRunPost: async (clubQuestsCreateDryRunPostRequest: ClubQuestsCreateDryRunPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clubQuestsCreateDryRunPostRequest' is not null or undefined
            assertParamExists('clubQuestsCreateDryRunPost', 'clubQuestsCreateDryRunPostRequest', clubQuestsCreateDryRunPostRequest)
            const localVarPath = `/clubQuests/create/dryRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clubQuestsCreateDryRunPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 구글 폼으로 입력 받은 정보를 기반으로 일상 퀘스트를 즉시 생성하고 알림을 보낸다.
         * @param {CreateAndNotifyDailyClubQuestRequestDTO} createAndNotifyDailyClubQuestRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndNotifyDailyClubQuest: async (createAndNotifyDailyClubQuestRequestDTO: CreateAndNotifyDailyClubQuestRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAndNotifyDailyClubQuestRequestDTO' is not null or undefined
            assertParamExists('createAndNotifyDailyClubQuest', 'createAndNotifyDailyClubQuestRequestDTO', createAndNotifyDailyClubQuestRequestDTO)
            const localVarPath = `/clubQuests/createAndNotifyDailyClubQuest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAndNotifyDailyClubQuestRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary dryRun 생성 결과를 받아서 실제로 퀘스트를 생성한다.
         * @param {CreateClubQuestRequest} createClubQuestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClubQuest: async (createClubQuestRequest: CreateClubQuestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClubQuestRequest' is not null or undefined
            assertParamExists('createClubQuest', 'createClubQuestRequest', createClubQuestRequest)
            const localVarPath = `/clubQuests/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClubQuestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 추천 검색어를 등록한다.
         * @param {AdminCreateSearchPlacePresetRequestDTO} adminCreateSearchPlacePresetRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSearchPreset: async (adminCreateSearchPlacePresetRequestDTO: AdminCreateSearchPlacePresetRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminCreateSearchPlacePresetRequestDTO' is not null or undefined
            assertParamExists('createSearchPreset', 'adminCreateSearchPlacePresetRequestDTO', adminCreateSearchPlacePresetRequestDTO)
            const localVarPath = `/places/searchPresets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateSearchPlacePresetRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 등록된 추천 검색어를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchPreset: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSearchPreset', 'id', id)
            const localVarPath = `/places/searchPresets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소를 조회한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClosedPlaceCandidate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClosedPlaceCandidate', 'id', id)
            const localVarPath = `/closed-place-candidates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 퀘스트 목록을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 퀘스트 조회 API
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCursoredClubQuestSummaries: async (cursor?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clubQuestSummaries/cursored`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 등록된 모든 추천 검색어를 가져온다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchPreset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/places/searchPresets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 해당 장소를 폐업의 폐업 추정을 무시한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreClosedPlaceCandidate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ignoreClosedPlaceCandidate', 'id', id)
            const localVarPath = `/closed-place-candidates/{id}/ignore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소의 리스트를 조회한다.
         * @param {boolean} [isAccessibilityRegistered] 
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClosedPlaceCandidates: async (isAccessibilityRegistered?: boolean, cursor?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/closed-place-candidates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isAccessibilityRegistered !== undefined) {
                localVarQueryParameter['isAccessibilityRegistered'] = isAccessibilityRegistered;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 로그인을 한다.
         * @param {LoginPostRequest} loginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginPostRequest: LoginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginPostRequest' is not null or undefined
            assertParamExists('loginPost', 'loginPostRequest', loginPostRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 삭제한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdDelete: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('notificationsPushSchedulesScheduleIdDelete', 'scheduleId', scheduleId)
            const localVarPath = `/notifications/pushSchedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 조회한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdGet: async (scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('notificationsPushSchedulesScheduleIdGet', 'scheduleId', scheduleId)
            const localVarPath = `/notifications/pushSchedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 수정한다.
         * @param {string} scheduleId 
         * @param {AdminUpdatePushNotificationScheduleRequestDTO} adminUpdatePushNotificationScheduleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdPut: async (scheduleId: string, adminUpdatePushNotificationScheduleRequestDTO: AdminUpdatePushNotificationScheduleRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('notificationsPushSchedulesScheduleIdPut', 'scheduleId', scheduleId)
            // verify required parameter 'adminUpdatePushNotificationScheduleRequestDTO' is not null or undefined
            assertParamExists('notificationsPushSchedulesScheduleIdPut', 'adminUpdatePushNotificationScheduleRequestDTO', adminUpdatePushNotificationScheduleRequestDTO)
            const localVarPath = `/notifications/pushSchedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdatePushNotificationScheduleRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 지정된 지역 내의 장소를 지도 API를 통해 크롤링해서 계단정복지도 서버 DB에 캐싱한다.
         * @param {StartPlaceCrawlingRequestDTO} startPlaceCrawlingRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPlaceCrawling: async (startPlaceCrawlingRequestDTO: StartPlaceCrawlingRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startPlaceCrawlingRequestDTO' is not null or undefined
            assertParamExists('startPlaceCrawling', 'startPlaceCrawlingRequestDTO', startPlaceCrawlingRequestDTO)
            const localVarPath = `/places/startCrawling`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startPlaceCrawlingRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 해당 장소를 폐업 상태로 변경한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptClosedPlaceCandidate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminClosedPlaceCandidateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptClosedPlaceCandidate(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 정보 등록 가능 지역 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessibilityAllowedRegionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessibilityAllowedRegionDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessibilityAllowedRegionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 생성한다.
         * @param {CreateAccessibilityAllowedRegionRequestDTO} createAccessibilityAllowedRegionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO: CreateAccessibilityAllowedRegionRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 삭제한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessibilityAllowedRegionsRegionIdDelete(regionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessibilityAllowedRegionsRegionIdDelete(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 조회한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessibilityAllowedRegionsRegionIdGet(regionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessibilityAllowedRegionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessibilityAllowedRegionsRegionIdGet(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 배너 생성 등의 상황에서 이미지를 업로드하기 위한 URL을 받아 온다.
         * @param {AdminCreateImageUploadUrlsRequestDTO} adminCreateImageUploadUrlsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO: AdminCreateImageUploadUrlsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateImageUploadUrlsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 푸시 알림 스케쥴을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 푸시 알림 조회.
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPushSchedules(cursor?: string, limit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminListPushNotificationSchedulesResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPushSchedules(cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 유저들에게 push notification을 보낸다.
         * @param {AdminSendPushNotificationRequestDTO} adminSendPushNotificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSendPushNotification(adminSendPushNotificationRequestDTO: AdminSendPushNotificationRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminSendPushNotification(adminSendPushNotificationRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 퀘스트를 삭제한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdDelete(clubQuestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdDelete(clubQuestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 퀘스트를 조회한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdGet(clubQuestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClubQuestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdGet(clubQuestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 점포의 폐점 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsClosedPutRequest} clubQuestsClubQuestIdIsClosedPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdIsClosedPut(clubQuestId: string, clubQuestsClubQuestIdIsClosedPutRequest: ClubQuestsClubQuestIdIsClosedPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdIsClosedPut(clubQuestId, clubQuestsClubQuestIdIsClosedPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 점포의 접근 가능 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsNotAccessiblePutRequest} clubQuestsClubQuestIdIsNotAccessiblePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId: string, clubQuestsClubQuestIdIsNotAccessiblePutRequest: ClubQuestsClubQuestIdIsNotAccessiblePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId, clubQuestsClubQuestIdIsNotAccessiblePutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 퀘스트에서 특정 건물을 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetBuildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId: string, targetBuildingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClubQuestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId, targetBuildingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 퀘스트에서 특정 장소를 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetPlaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId: string, targetPlaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClubQuestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId, targetPlaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 주어진 조건(중심 위치, 반경, 퀘스트 분할 숫자 등)으로 퀘스트를 생성하면 어떻게 생성될지 시뮬레이션하여 미리 확인한다.
         * @param {ClubQuestsCreateDryRunPostRequest} clubQuestsCreateDryRunPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest: ClubQuestsCreateDryRunPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubQuestCreateDryRunResultItemDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 구글 폼으로 입력 받은 정보를 기반으로 일상 퀘스트를 즉시 생성하고 알림을 보낸다.
         * @param {CreateAndNotifyDailyClubQuestRequestDTO} createAndNotifyDailyClubQuestRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO: CreateAndNotifyDailyClubQuestRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAndNotifyDailyClubQuestResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary dryRun 생성 결과를 받아서 실제로 퀘스트를 생성한다.
         * @param {CreateClubQuestRequest} createClubQuestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClubQuest(createClubQuestRequest: CreateClubQuestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClubQuestResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClubQuest(createClubQuestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 추천 검색어를 등록한다.
         * @param {AdminCreateSearchPlacePresetRequestDTO} adminCreateSearchPlacePresetRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSearchPreset(adminCreateSearchPlacePresetRequestDTO: AdminCreateSearchPlacePresetRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSearchPreset(adminCreateSearchPlacePresetRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 등록된 추천 검색어를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSearchPreset(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSearchPreset(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소를 조회한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClosedPlaceCandidate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminClosedPlaceCandidateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClosedPlaceCandidate(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 퀘스트 목록을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 퀘스트 조회 API
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCursoredClubQuestSummaries(cursor?: string, limit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCursoredClubQuestSummariesResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCursoredClubQuestSummaries(cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 등록된 모든 추천 검색어를 가져온다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchPreset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSearchPreset200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchPreset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 해당 장소를 폐업의 폐업 추정을 무시한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ignoreClosedPlaceCandidate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminClosedPlaceCandidateDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ignoreClosedPlaceCandidate(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소의 리스트를 조회한다.
         * @param {boolean} [isAccessibilityRegistered] 
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClosedPlaceCandidates(isAccessibilityRegistered?: boolean, cursor?: string, limit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminListClosedPlaceCandidatesResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClosedPlaceCandidates(isAccessibilityRegistered, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 로그인을 한다.
         * @param {LoginPostRequest} loginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginPostRequest: LoginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 삭제한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsPushSchedulesScheduleIdDelete(scheduleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsPushSchedulesScheduleIdDelete(scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 조회한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsPushSchedulesScheduleIdGet(scheduleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminPushNotificationScheduleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsPushSchedulesScheduleIdGet(scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 수정한다.
         * @param {string} scheduleId 
         * @param {AdminUpdatePushNotificationScheduleRequestDTO} adminUpdatePushNotificationScheduleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsPushSchedulesScheduleIdPut(scheduleId: string, adminUpdatePushNotificationScheduleRequestDTO: AdminUpdatePushNotificationScheduleRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsPushSchedulesScheduleIdPut(scheduleId, adminUpdatePushNotificationScheduleRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 지정된 지역 내의 장소를 지도 API를 통해 크롤링해서 계단정복지도 서버 DB에 캐싱한다.
         * @param {StartPlaceCrawlingRequestDTO} startPlaceCrawlingRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startPlaceCrawling(startPlaceCrawlingRequestDTO: StartPlaceCrawlingRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startPlaceCrawling(startPlaceCrawlingRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 해당 장소를 폐업 상태로 변경한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptClosedPlaceCandidate(id: string, options?: any): AxiosPromise<AdminClosedPlaceCandidateDTO> {
            return localVarFp.acceptClosedPlaceCandidate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 정보 등록 가능 지역 목록을 조회한다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsGet(options?: any): AxiosPromise<Array<AccessibilityAllowedRegionDTO>> {
            return localVarFp.accessibilityAllowedRegionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 생성한다.
         * @param {CreateAccessibilityAllowedRegionRequestDTO} createAccessibilityAllowedRegionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO: CreateAccessibilityAllowedRegionRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 삭제한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsRegionIdDelete(regionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.accessibilityAllowedRegionsRegionIdDelete(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 정보 등록 가능 지역을 조회한다.
         * @param {string} regionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessibilityAllowedRegionsRegionIdGet(regionId: string, options?: any): AxiosPromise<AccessibilityAllowedRegionDTO> {
            return localVarFp.accessibilityAllowedRegionsRegionIdGet(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 배너 생성 등의 상황에서 이미지를 업로드하기 위한 URL을 받아 온다.
         * @param {AdminCreateImageUploadUrlsRequestDTO} adminCreateImageUploadUrlsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO: AdminCreateImageUploadUrlsRequestDTO, options?: any): AxiosPromise<AdminCreateImageUploadUrlsResponseDTO> {
            return localVarFp.adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 푸시 알림 스케쥴을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 푸시 알림 조회.
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPushSchedules(cursor?: string, limit?: string, options?: any): AxiosPromise<AdminListPushNotificationSchedulesResponseDTO> {
            return localVarFp.adminGetPushSchedules(cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 유저들에게 push notification을 보낸다.
         * @param {AdminSendPushNotificationRequestDTO} adminSendPushNotificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendPushNotification(adminSendPushNotificationRequestDTO: AdminSendPushNotificationRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.adminSendPushNotification(adminSendPushNotificationRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 퀘스트를 삭제한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdDelete(clubQuestId: string, options?: any): AxiosPromise<void> {
            return localVarFp.clubQuestsClubQuestIdDelete(clubQuestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 퀘스트를 조회한다.
         * @param {string} clubQuestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdGet(clubQuestId: string, options?: any): AxiosPromise<ClubQuestDTO> {
            return localVarFp.clubQuestsClubQuestIdGet(clubQuestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 점포의 폐점 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsClosedPutRequest} clubQuestsClubQuestIdIsClosedPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdIsClosedPut(clubQuestId: string, clubQuestsClubQuestIdIsClosedPutRequest: ClubQuestsClubQuestIdIsClosedPutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.clubQuestsClubQuestIdIsClosedPut(clubQuestId, clubQuestsClubQuestIdIsClosedPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 점포의 접근 가능 여부를 저장한다.
         * @param {string} clubQuestId 
         * @param {ClubQuestsClubQuestIdIsNotAccessiblePutRequest} clubQuestsClubQuestIdIsNotAccessiblePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId: string, clubQuestsClubQuestIdIsNotAccessiblePutRequest: ClubQuestsClubQuestIdIsNotAccessiblePutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId, clubQuestsClubQuestIdIsNotAccessiblePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 퀘스트에서 특정 건물을 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetBuildingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId: string, targetBuildingId: string, options?: any): AxiosPromise<ClubQuestDTO> {
            return localVarFp.clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId, targetBuildingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 퀘스트에서 특정 장소를 제외한다.
         * @param {string} clubQuestId 
         * @param {string} targetPlaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId: string, targetPlaceId: string, options?: any): AxiosPromise<ClubQuestDTO> {
            return localVarFp.clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId, targetPlaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 주어진 조건(중심 위치, 반경, 퀘스트 분할 숫자 등)으로 퀘스트를 생성하면 어떻게 생성될지 시뮬레이션하여 미리 확인한다.
         * @param {ClubQuestsCreateDryRunPostRequest} clubQuestsCreateDryRunPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest: ClubQuestsCreateDryRunPostRequest, options?: any): AxiosPromise<Array<ClubQuestCreateDryRunResultItemDTO>> {
            return localVarFp.clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 구글 폼으로 입력 받은 정보를 기반으로 일상 퀘스트를 즉시 생성하고 알림을 보낸다.
         * @param {CreateAndNotifyDailyClubQuestRequestDTO} createAndNotifyDailyClubQuestRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO: CreateAndNotifyDailyClubQuestRequestDTO, options?: any): AxiosPromise<CreateAndNotifyDailyClubQuestResponseDTO> {
            return localVarFp.createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary dryRun 생성 결과를 받아서 실제로 퀘스트를 생성한다.
         * @param {CreateClubQuestRequest} createClubQuestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClubQuest(createClubQuestRequest: CreateClubQuestRequest, options?: any): AxiosPromise<CreateClubQuestResponseDTO> {
            return localVarFp.createClubQuest(createClubQuestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 추천 검색어를 등록한다.
         * @param {AdminCreateSearchPlacePresetRequestDTO} adminCreateSearchPlacePresetRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSearchPreset(adminCreateSearchPlacePresetRequestDTO: AdminCreateSearchPlacePresetRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createSearchPreset(adminCreateSearchPlacePresetRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 등록된 추천 검색어를 삭제한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchPreset(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSearchPreset(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소를 조회한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClosedPlaceCandidate(id: string, options?: any): AxiosPromise<AdminClosedPlaceCandidateDTO> {
            return localVarFp.getClosedPlaceCandidate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 퀘스트 목록을 커서링 방식으로 조회한다.
         * @summary 커서링 방식의 퀘스트 조회 API
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCursoredClubQuestSummaries(cursor?: string, limit?: string, options?: any): AxiosPromise<GetCursoredClubQuestSummariesResultDTO> {
            return localVarFp.getCursoredClubQuestSummaries(cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 등록된 모든 추천 검색어를 가져온다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchPreset(options?: any): AxiosPromise<GetSearchPreset200Response> {
            return localVarFp.getSearchPreset(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 해당 장소를 폐업의 폐업 추정을 무시한다.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreClosedPlaceCandidate(id: string, options?: any): AxiosPromise<AdminClosedPlaceCandidateDTO> {
            return localVarFp.ignoreClosedPlaceCandidate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 폐업이 추정되는 장소의 리스트를 조회한다.
         * @param {boolean} [isAccessibilityRegistered] 
         * @param {string} [cursor] 
         * @param {string} [limit] default 값은 50으로 설정된다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClosedPlaceCandidates(isAccessibilityRegistered?: boolean, cursor?: string, limit?: string, options?: any): AxiosPromise<AdminListClosedPlaceCandidatesResponseDTO> {
            return localVarFp.listClosedPlaceCandidates(isAccessibilityRegistered, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 로그인을 한다.
         * @param {LoginPostRequest} loginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginPostRequest: LoginPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.loginPost(loginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 삭제한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdDelete(scheduleId: string, options?: any): AxiosPromise<void> {
            return localVarFp.notificationsPushSchedulesScheduleIdDelete(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 조회한다.
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdGet(scheduleId: string, options?: any): AxiosPromise<AdminPushNotificationScheduleDTO> {
            return localVarFp.notificationsPushSchedulesScheduleIdGet(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 푸시 알림 스케쥴을 수정한다.
         * @param {string} scheduleId 
         * @param {AdminUpdatePushNotificationScheduleRequestDTO} adminUpdatePushNotificationScheduleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsPushSchedulesScheduleIdPut(scheduleId: string, adminUpdatePushNotificationScheduleRequestDTO: AdminUpdatePushNotificationScheduleRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.notificationsPushSchedulesScheduleIdPut(scheduleId, adminUpdatePushNotificationScheduleRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 지정된 지역 내의 장소를 지도 API를 통해 크롤링해서 계단정복지도 서버 DB에 캐싱한다.
         * @param {StartPlaceCrawlingRequestDTO} startPlaceCrawlingRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPlaceCrawling(startPlaceCrawlingRequestDTO: StartPlaceCrawlingRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.startPlaceCrawling(startPlaceCrawlingRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 해당 장소를 폐업 상태로 변경한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acceptClosedPlaceCandidate(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acceptClosedPlaceCandidate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 정보 등록 가능 지역 목록을 조회한다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessibilityAllowedRegionsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessibilityAllowedRegionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 정보 등록 가능 지역을 생성한다.
     * @param {CreateAccessibilityAllowedRegionRequestDTO} createAccessibilityAllowedRegionRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO: CreateAccessibilityAllowedRegionRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessibilityAllowedRegionsPost(createAccessibilityAllowedRegionRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 정보 등록 가능 지역을 삭제한다.
     * @param {string} regionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessibilityAllowedRegionsRegionIdDelete(regionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessibilityAllowedRegionsRegionIdDelete(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 정보 등록 가능 지역을 조회한다.
     * @param {string} regionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessibilityAllowedRegionsRegionIdGet(regionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessibilityAllowedRegionsRegionIdGet(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 배너 생성 등의 상황에서 이미지를 업로드하기 위한 URL을 받아 온다.
     * @param {AdminCreateImageUploadUrlsRequestDTO} adminCreateImageUploadUrlsRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO: AdminCreateImageUploadUrlsRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminCreateImageUploadUrls(adminCreateImageUploadUrlsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 푸시 알림 스케쥴을 커서링 방식으로 조회한다.
     * @summary 커서링 방식의 푸시 알림 조회.
     * @param {string} [cursor] 
     * @param {string} [limit] default 값은 50으로 설정된다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminGetPushSchedules(cursor?: string, limit?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminGetPushSchedules(cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 유저들에게 push notification을 보낸다.
     * @param {AdminSendPushNotificationRequestDTO} adminSendPushNotificationRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminSendPushNotification(adminSendPushNotificationRequestDTO: AdminSendPushNotificationRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminSendPushNotification(adminSendPushNotificationRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 퀘스트를 삭제한다.
     * @param {string} clubQuestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdDelete(clubQuestId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdDelete(clubQuestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 퀘스트를 조회한다.
     * @param {string} clubQuestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdGet(clubQuestId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdGet(clubQuestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 점포의 폐점 여부를 저장한다.
     * @param {string} clubQuestId 
     * @param {ClubQuestsClubQuestIdIsClosedPutRequest} clubQuestsClubQuestIdIsClosedPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdIsClosedPut(clubQuestId: string, clubQuestsClubQuestIdIsClosedPutRequest: ClubQuestsClubQuestIdIsClosedPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdIsClosedPut(clubQuestId, clubQuestsClubQuestIdIsClosedPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 점포의 접근 가능 여부를 저장한다.
     * @param {string} clubQuestId 
     * @param {ClubQuestsClubQuestIdIsNotAccessiblePutRequest} clubQuestsClubQuestIdIsNotAccessiblePutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId: string, clubQuestsClubQuestIdIsNotAccessiblePutRequest: ClubQuestsClubQuestIdIsNotAccessiblePutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdIsNotAccessiblePut(clubQuestId, clubQuestsClubQuestIdIsNotAccessiblePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 퀘스트에서 특정 건물을 제외한다.
     * @param {string} clubQuestId 
     * @param {string} targetBuildingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId: string, targetBuildingId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdTargetBuildingsDelete(clubQuestId, targetBuildingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 퀘스트에서 특정 장소를 제외한다.
     * @param {string} clubQuestId 
     * @param {string} targetPlaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId: string, targetPlaceId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsClubQuestIdTargetPlacesDelete(clubQuestId, targetPlaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 주어진 조건(중심 위치, 반경, 퀘스트 분할 숫자 등)으로 퀘스트를 생성하면 어떻게 생성될지 시뮬레이션하여 미리 확인한다.
     * @param {ClubQuestsCreateDryRunPostRequest} clubQuestsCreateDryRunPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest: ClubQuestsCreateDryRunPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clubQuestsCreateDryRunPost(clubQuestsCreateDryRunPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 구글 폼으로 입력 받은 정보를 기반으로 일상 퀘스트를 즉시 생성하고 알림을 보낸다.
     * @param {CreateAndNotifyDailyClubQuestRequestDTO} createAndNotifyDailyClubQuestRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO: CreateAndNotifyDailyClubQuestRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAndNotifyDailyClubQuest(createAndNotifyDailyClubQuestRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary dryRun 생성 결과를 받아서 실제로 퀘스트를 생성한다.
     * @param {CreateClubQuestRequest} createClubQuestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createClubQuest(createClubQuestRequest: CreateClubQuestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createClubQuest(createClubQuestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 추천 검색어를 등록한다.
     * @param {AdminCreateSearchPlacePresetRequestDTO} adminCreateSearchPlacePresetRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSearchPreset(adminCreateSearchPlacePresetRequestDTO: AdminCreateSearchPlacePresetRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSearchPreset(adminCreateSearchPlacePresetRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 등록된 추천 검색어를 삭제한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSearchPreset(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSearchPreset(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐업이 추정되는 장소를 조회한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClosedPlaceCandidate(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClosedPlaceCandidate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 퀘스트 목록을 커서링 방식으로 조회한다.
     * @summary 커서링 방식의 퀘스트 조회 API
     * @param {string} [cursor] 
     * @param {string} [limit] default 값은 50으로 설정된다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCursoredClubQuestSummaries(cursor?: string, limit?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCursoredClubQuestSummaries(cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 등록된 모든 추천 검색어를 가져온다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSearchPreset(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSearchPreset(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 해당 장소를 폐업의 폐업 추정을 무시한다.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ignoreClosedPlaceCandidate(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ignoreClosedPlaceCandidate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 폐업이 추정되는 장소의 리스트를 조회한다.
     * @param {boolean} [isAccessibilityRegistered] 
     * @param {string} [cursor] 
     * @param {string} [limit] default 값은 50으로 설정된다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listClosedPlaceCandidates(isAccessibilityRegistered?: boolean, cursor?: string, limit?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listClosedPlaceCandidates(isAccessibilityRegistered, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 로그인을 한다.
     * @param {LoginPostRequest} loginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(loginPostRequest: LoginPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(loginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 푸시 알림 스케쥴을 삭제한다.
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notificationsPushSchedulesScheduleIdDelete(scheduleId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notificationsPushSchedulesScheduleIdDelete(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 푸시 알림 스케쥴을 조회한다.
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notificationsPushSchedulesScheduleIdGet(scheduleId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notificationsPushSchedulesScheduleIdGet(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 푸시 알림 스케쥴을 수정한다.
     * @param {string} scheduleId 
     * @param {AdminUpdatePushNotificationScheduleRequestDTO} adminUpdatePushNotificationScheduleRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notificationsPushSchedulesScheduleIdPut(scheduleId: string, adminUpdatePushNotificationScheduleRequestDTO: AdminUpdatePushNotificationScheduleRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notificationsPushSchedulesScheduleIdPut(scheduleId, adminUpdatePushNotificationScheduleRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 지정된 지역 내의 장소를 지도 API를 통해 크롤링해서 계단정복지도 서버 DB에 캐싱한다.
     * @param {StartPlaceCrawlingRequestDTO} startPlaceCrawlingRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startPlaceCrawling(startPlaceCrawlingRequestDTO: StartPlaceCrawlingRequestDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startPlaceCrawling(startPlaceCrawlingRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


